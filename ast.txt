mainFunction.node = newNode('MAIN',stmtsAndFunctionDefs.node)
stmtsAndFunctionDefs.node = stmtOrFunctionDef.node + moreStmtAndFunctionDefs.node
moreStmtAndFunctionDefs.node = stmtsAndFunctionDefs.node
moreStmtAndFunctionDefs.node = NULL
stmtOrFunctionDef.node = stmt.node
stmtOrFunctionDef.node = functionDef.node
stmt.node = newNode('declarationStmt',declarationStmt.node)
stmt.node = newNode('assignFuncCallSizeStmt',newLeaf(ID,ID.entry),assignFuncCallSizeStmt.node)
stmt.node = newNode('conditionalStmt',conditionalStmt.node)
stmt.node = newNOde('ioStmt',ioStmt.node)
stmt.node = newNode('funCallSizeStmt',varlist.node,funcCallSizeStmt.node)
stmt.node = newNode('funcCallStmt',funcCallStmt.node)
functionDef.node = newNode('FUNCTION',parameterList1.node,newLeaf(FUNID,FUNID.entry),parameterList2.node, stmtsAndFunctionDefs.node)
parameterList.node = newNode('typeId',typevar.node , newLeaf(ID,ID.entry)) + remainingList.node
typevar.node = newLeaf(INT)
typevar.node = newLeaf(REAL)
typevar.node = newLeaf(STRING)
typevar.node = newLeaf(MATRIX)
remainingList.node = parameterList.node
remainingList.node = NULL
declarationStmt.node = typevar.node + varlist.node
varList.node = newLeaf(ID,Id.entry) + moreIds.node
moreIds.node = varList.node
moreIds.node = NULL
assignFuncCallSizeStmt.node = assignmentStmt.node
assignFuncCallSizeStmt.node = funcCallSizeStmt.node
funcCallSizeStmt.node = funCallStmt.node
funcCallSizeStmt.node = sizeStmt.node
sizeStmt.node = makeNode('SIZE',newLeaf(ID,ID.entry))
conditionalStmt.node = newNode('IF',booleanExpression.node,stmt.node + otherStmts.node,elseStmt)
otherStmts.node = stmt.node + otherStmts.node
otherStmts.node = NULL
elseStmt.node = newNode('ELSE',stmt.node + otherStmts.node)
elseStmt.node = NULL
ioStmt.node = newNode('READ',newLeaf(ID,ID.entry))
ioStmt.node = newNode('PRINT',newLeaf(ID,ID.entry))
funCallStmt.node = newNode('FUNCALL',newLeaf(FUNID,FUNID.entry),emptyOrInputParameterList.node)
emptyOrInputParameterList.node = inputParameterList.node
emptyOrInputParameterList.node = NULL
inputParameterList.node = var.node + listVar.node
listVar.node = inputParameterList.node
listVar.node = NULL 
assignmentStmt.node = makeNode('assignmentStmt',arithmeticExpression.node)
arithmeticExpression.node = arithmeticExpressions1.syn | arithmeticExpressions1.inh = arithmeticExpression2.node
arithmeticExpression1.node = newNode('operatorplusminus',arithmeticExpression.node) | arihmeticExpression1.syn = arithmeticExpression.syn
arithmeticExpression1.node = NULL | arithmeticExpression1.syn = arithmeticExpression.inh
arithmeticExpression2.node = arithmeticExpression3.syn | arithmeticExpression3.inh = varExpression.node
arithmeticExpression3.node = newNode('operatormuldiv',arithmeticExpression2.node) | arithmeticExpreesion3.syn = arithmeticExpression2.syn
arithmeticExpression3.node = NULL | arithmeticExpreesion3.syn = arithmeticExpression3.inh
varExpression.node = arithmeticExpression.node
varExpression.node = var.node
operatorplusminus.node = newLeaf(PLUS)
operatorplusminus.node = newLeaf(MINUS)
operatormuldiv.node = newLeaf(MUL)
operatormuldiv.node = newLeaf(DIV)
booleanExpression.node = newNode('bool',booleanExpression2.node)
booleanExpression.node = newNode('notbool'booleanExpression2.node)
booleanExpression2.node = newNode('constrainedrelationOP',constrainedVars1.node,relationalOp.node,constrainedVars2.node,moreBooleanExpression.node)
booleanExpression2.node = newNode('relationOP'booleanExpression.node,moreBooleanExpression.node)
moreBooleanExpression.node = logicalOp.node + booleanExpression.node
moreBooleanExpression.node = NULL
constrainedVars.node = newLeaf(ID,ID.entry)
constrainedVars.node = newLeaf(NUM,NUM.entry)
constrainedVars.node = newLeaf(RNUM,RNUM.entry)
matrixVar.node = newNode('MATRIX',matrixRows.node)
matrixRows.node = newNode('MATRIXROW',matrixRow.node) + matrixRows1.node
matrixRows1.node = matrixRows.node
matrixRows1.node = NULL
matrixRow.node = newLeaf(NUM,NUM.entry) + matrixRows1.node
matrixRow1.node = matrixRow.node
matrixRow1.node = NULL
var.node = newLeaf(ID,ID.entry) + matrixElement.node
var.node = newLeaf(NUM,NUM.entry)
var.node = newLeaf(RNUM,RNUM.entry)
var.node = matrixVar.node
var.node = newLeaf(STR,STR.entry)
matrixElement.node = newLeaf(NUM,NUM.entry) + newLeaf(NUM,NUM.entry)
matrixElement.node = NULL
logicalOp.node = newLeaf(AND)
logicalOp.node = newLeaf(OR)
relationalOp.node = newLeaf(LT)
relationalOp.node = newLeaf(LE)
relationalOp.node = newLeaf(EQ)
relationalOp.node = newLeaf(GT)
relationalOp.node = newLeaf(GE)
relationalOp.node = newLeaf(NE)